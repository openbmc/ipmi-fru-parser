{
  "comments": [
    {
      "key": {
        "uuid": "7d86f001_54dab1ef",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "Out of curiosity, what was clang-format giving you trouble about here?",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cf5be3e_c3c8f1ea",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "It was indenting in the `// Table XX` comments, aligning them as if they were a continuation of the previous line comment.\n\nRant:\nHonestly, I don\u0027t like the idea of clang-format vetoing the commits, because the program is pretty dumb and can\u0027t always tell what the proper formatting would be.\nFor instance, as you will see, in the new version (upcoming PS21) of mrBits(), clang-format wants to join the closing curly brace in map definition, making it a reading hell (`}}};`). Leaving the last curly it on the next line would be much more readable, but there is no such option with clang-format running in automatic procrustean mode.\n\nIt would be great if there was a button like \u0027Yes, I know, I did this intentionally\u0027. Putting in the clang-format comments is pretty ugly to my taste.",
      "parentUuid": "7d86f001_54dab1ef",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddb0227e_c7a159d8",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 66,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "Nit: Rather than rephrase the name of the method, maybe you could state _why_ you need 10mV units (and therefore the converter method) :)",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee67cdec_c7f0c0b0",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 66,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Ok. Will do. Most other voltages per spec are in these units.",
      "parentUuid": "ddb0227e_c7a159d8",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1159a38_90bcbda2",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 93,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "I\u0027m not sure that I like this. If someone modifies IpmiMultiRecordParam, they must know to modify ms[] as well - and they must do it in the exact same order. This strikes me as very fragile - especially considering that there are fields missing from the spec, and you\u0027ve made no warning in your comments on either code area.\n\nA less fragile approach could be to use a map\u003cIpmiMultirecordParam, MaskShift\u003e - or, if you don\u0027t like the overhead, you could switch on `p` here and choose the correct offset that way, which is more verbose but lighter weight than an STL container.\n\nSpecifically, I\u0027m worried about our new developer coming over and tacking \"psuVoltageCombined\" on line 59 (PS20), and then committing it, saying, \"I\u0027ll do the implementation next week.\" And nobody notices, because it\u0027s just a new enum, it should be safe, and anyway this person isn\u0027t using the DC Output stuff in their project yet - and now your ms[] is broken.",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0603302_fb85fdb6",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 93,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Well... I was using designated initializers like `[paramEolst] \u003d {1, 7}`, but it turned out that those are C99-only and are not allowed in all-glorious-and-marvelous ISO C++. So I removed them. I understand your concern though and share it.\n\nUsing `std::map` will definitely introduce some overhead (both for runtime and for eyes reading the code) and will prevent this function from remaining `constexpr`, but I\u0027ll change the code to use a map as it seems the best of C++ compliant solutions.",
      "parentUuid": "c1159a38_90bcbda2",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc7af9a5_9e5bf26d",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 93,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2019-04-25T17:10:33Z",
      "side": 1,
      "message": "I would strongly discourage using a map for the weight of it. maps are way overused (IMO) in our codebase when a much cleaner mechanism could be used.\n\nIn this case, I would suggest making this table into a switch statement, because that will catch the case when a new enum value is added but not handled.",
      "parentUuid": "f0603302_fb85fdb6",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c552991a_26c93b29",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 142,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "Nice - thanks for specifying this.",
      "range": {
        "startLine": 142,
        "startChar": 42,
        "endLine": 142,
        "endChar": 67
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19b8f61b_beb8d523",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 142,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "You\u0027re welcome",
      "parentUuid": "c552991a_26c93b29",
      "range": {
        "startLine": 142,
        "startChar": 42,
        "endLine": 142,
        "endChar": 67
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23586d79_5de80f81",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 178,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "The naming is a little weak, here and below. Can you do better than naming a class with \"Class\" in the name :) (minor nit)",
      "range": {
        "startLine": 178,
        "startChar": 6,
        "endLine": 178,
        "endChar": 22
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f004acd3_3b0628fa",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 178,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Well. The best I can think of, is renaming PowerSupplyInfo structure into PowerSupplyInfoData and removing \u0027Class\u0027 from this class.",
      "parentUuid": "23586d79_5de80f81",
      "range": {
        "startLine": 178,
        "startChar": 6,
        "endLine": 178,
        "endChar": 22
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d40525b_15f5effc",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 183,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "Where are you getting your guarantees that the length is right?\n\nIf you don\u0027t guarantee it elsewhere, my opinion is that you shouldn\u0027t use the init list, and should instead check the length and then set pData to the buffer.\n\nThis same comment holds for DcOutputClass.",
      "range": {
        "startLine": 183,
        "startChar": 59,
        "endLine": 183,
        "endChar": 63
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1fc9e34_cb42b464",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 183,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "It is guaranteed in lines 447:462 of PS20. Will add a comment here.",
      "parentUuid": "7d40525b_15f5effc",
      "range": {
        "startLine": 183,
        "startChar": 59,
        "endLine": 183,
        "endChar": 63
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c577be8b_b338613f",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 183,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2019-04-25T17:10:33Z",
      "side": 1,
      "message": "I may have made a mistake in my suggestion. Rather than passing in a uint8_t *, it would be better to just pass in a reference to the class. If done properly, it could compile to the same thing, but the check for size of uint8_t buffer would be done at the same place the buffer was consumed.\n\nclass PowerSupplyClass : public MultirecordInfo\n{\n  public:\n    explicit PowerSupplyClass(PowerSupplyInfo\u0026\u0026 info)\n     : pData(std::forward\u003cPowerSupplyInFo\u003e(info))\n    {\n    }\n...\n};\n\n...\nuint8_t *data;\nsize_t dataLen \u003d payloadLen;\nif (dataLen \u003c sizeof(PowerSupplyInfo))\n{\n    return error;\n}\nauto psu \u003d std::make_unique\u003cPowerSupplyClass\u003e(\n                *reinterpret_cast\u003cPowerSupplyInfo*\u003e(data));\n\nI am not sure if this would work or not, I am just thinking out loud. But I like this sort of approach better because it puts the",
      "parentUuid": "c1fc9e34_cb42b464",
      "range": {
        "startLine": 183,
        "startChar": 59,
        "endLine": 183,
        "endChar": 63
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ab8f029_f28b648e",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 200,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "Make sure you fix these if you change the type in DBus as vmauery suggested.",
      "range": {
        "startLine": 200,
        "startChar": 34,
        "endLine": 200,
        "endChar": 41
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a86c292b_99c95abd",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 200,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "As I explained in the interface change, let\u0027s leave it int64_t for now.\nIt\u0027s all due to allowed variants in ipmi::vpd::Value.",
      "parentUuid": "1ab8f029_f28b648e",
      "range": {
        "startLine": 200,
        "startChar": 34,
        "endLine": 200,
        "endChar": 41
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3b8c88f_48b2ebf6",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 566,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "Yeah, the indent creep of this code is really bad. It\u0027s causing you to exceed 80col line widths, which is contrary to the OpenBMC standard (and an accessibility issue). You could either add a newline for the argument to entries when necessary:\nentry(\"IN_DROPOUT_TOLERANCE\u003d\" PRIu8,\n    psi.inDropoutTolerance),\n\nor you could break out to a helper:\n\nswitch (record.type)\n{\n  case IpmiMultirecordType::powerSupplyInfo:\n    dumpPowerSupplyInfo(record.data.powerSupplyInfo);\n    break;\n  case IpmiMultirecordType::dcOutput:\n    dumpDcOutputInfo(record.data.dcOutputInfo);\n    break;\n  default:\n    ...\n}",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8b5b992_170f6e06",
        "filename": "multirecord.cpp",
        "patchSetId": 20
      },
      "lineNbr": 566,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b3b8c88f_48b2ebf6",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55186139_4d049e85",
        "filename": "multirecord.hpp",
        "patchSetId": 20
      },
      "lineNbr": 47,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "spec says \"asf\"",
      "range": {
        "startLine": 47,
        "startChar": 6,
        "endLine": 47,
        "endChar": 7
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d7b174_2a104526",
        "filename": "multirecord.hpp",
        "patchSetId": 20
      },
      "lineNbr": 47,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Sure, that\u0027s a typo. Thanks for noticing.",
      "parentUuid": "55186139_4d049e85",
      "range": {
        "startLine": 47,
        "startChar": 6,
        "endLine": 47,
        "endChar": 7
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2c05c39_cb1f3d7a",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 279,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "lowerCamel",
      "range": {
        "startLine": 279,
        "startChar": 40,
        "endLine": 279,
        "endChar": 47
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2fd740b_bccedfb5",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 279,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b2c05c39_cb1f3d7a",
      "range": {
        "startLine": 279,
        "startChar": 40,
        "endLine": 279,
        "endChar": 47
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01845a78_889c9271",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 280,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "lowerCamel",
      "range": {
        "startLine": 280,
        "startChar": 41,
        "endLine": 280,
        "endChar": 53
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d7cfb5d_79bf1a5e",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 280,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "01845a78_889c9271",
      "range": {
        "startLine": 280,
        "startChar": 41,
        "endLine": 280,
        "endChar": 53
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b64666e_e2756175",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 362,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "Thanks for your effort clarifying this comment.\n\nThere\u0027s a possible argument to be made that the rework in checksum that you did here and below would be better used in a different review. At this point, I don\u0027t really care, and want to get your review in :) but maybe something to think of for next time - this rework inflates the size of your review and makes it more intimidating (and less likely to be reviewed in timely fashion). If you had submitted it on its own, people would have said, \"cool, a rephrase and small bugfixes for checksum - this is readable, that\u0027s a quick +1!\" but here it is tied to a lot of heavy new logic, and it\u0027s making an already difficult review even scarier. :)",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56b747be_6dc331be",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 362,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "You\u0027re right, but I guess it\u0027s too late to split it. It will only make the overall review process even slower now. I\u0027ll keep this in mind though for future commits.",
      "parentUuid": "8b64666e_e2756175",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "927e7f0c_7b5a079b",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 511,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "This comment is now stale.",
      "range": {
        "startLine": 511,
        "startChar": 31,
        "endLine": 511,
        "endChar": 51
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f48448b_9bf54e00",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 511,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Thank you for this comment. Although the comment in question looks to have become stale long before our changes, your comment made me read some more code around, and I found that there was another similar loop where a similar change was desirable, so PS21 will have that change too.",
      "parentUuid": "927e7f0c_7b5a079b",
      "range": {
        "startLine": 511,
        "startChar": 31,
        "endLine": 511,
        "endChar": 51
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4b37927_2bf6825f",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 519,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "This is stale.",
      "range": {
        "startLine": 519,
        "startChar": 53,
        "endLine": 519,
        "endChar": 69
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "231c130c_13c5af67",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 519,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b4b37927_2bf6825f",
      "range": {
        "startLine": 519,
        "startChar": 53,
        "endLine": 519,
        "endChar": 69
      },
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1fcbce7_3ebc27be",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 539,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-25T01:53:56Z",
      "side": 1,
      "message": "Nice job commenting your code here - I like it.",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2c790b9_b163e915",
        "filename": "writefrudata.cpp",
        "patchSetId": 20
      },
      "lineNbr": 539,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-25T14:38:11Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "d1fcbce7_3ebc27be",
      "revId": "092cba50088681129008c59fbf6cadfbc51d78ef",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}