{
  "comments": [
    {
      "key": {
        "uuid": "60b17c3d_8bad3dde",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-12-24T16:02:04Z",
      "side": 1,
      "message": "Vernon, Emily, hasn\u0027t this become A LOT UGLIER now with this \nC++ blessed `enum class` than it was in patchset 14 with normal `enum`? Do you really think it was worth it?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 79
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "386a3775_0af5268f",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-01-02T22:28:48Z",
      "side": 1,
      "message": "This line is indeed awful. Let me step back and take another look at the patchset as a whole; I think it shouldn\u0027t be done this way, and whether that means we drop enum class or we get the sizes differently I\u0027m not sure yet.",
      "parentUuid": "60b17c3d_8bad3dde",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 79
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c83c867c_c0da9f7c",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-01-02T23:11:42Z",
      "side": 1,
      "message": "Alexander + Yadro etc, I took another look. I noticed the following:\n\n- I\u0027m not wild about the \"cool trick\" to get the count of types by sticking an unlabeled enum at the end of IpmiMultirecordType, but I can follow it, so fine.\n- The fact that this is ugly is kind of a \"design feature\" of enum class. This is a hacky way to do a lookup table with enums, and the language is telling you so.\n- This lookup table only has two out of 10 values implemented, and doesn\u0027t give any built in indication that an \"unimplemented\" value has been accessed.\n\nSo, here\u0027s my opinion (nothing more, nothing less):\nKeep the enum class and listen to what it\u0027s telling you. This weird lookup table is not the right way of doing things. Use a helper function, and use the helper function to warn or error when an unimplemented type is called.  It may seem redundant to do a switch on the enum type and assign a value, but it will be easier to understand and maintain than this kind of lookup, and you will be able to make it more featureful (ie support returning an error, warning, exception, whatever you want).",
      "parentUuid": "386a3775_0af5268f",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 79
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb119626_daa30cf1",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2019-04-18T01:52:12Z",
      "side": 1,
      "message": "I\u0027d like to see this comment addressed or acknowledged.",
      "parentUuid": "c83c867c_c0da9f7c",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 79
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "059a2765_29f1093a",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-24T17:43:37Z",
      "side": 1,
      "message": "Ack. Will address this with the next patch set.",
      "parentUuid": "fb119626_daa30cf1",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 79
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b43f8486_f9e42d08",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 162,
      "author": {
        "id": 1000266
      },
      "writtenOn": "2019-04-18T03:08:15Z",
      "side": 1,
      "message": "Do we need to init this variable before using for each while loop?",
      "range": {
        "startLine": 162,
        "startChar": 4,
        "endLine": 162,
        "endChar": 23
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89ba4a73_d485a3b3",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 162,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-24T17:43:37Z",
      "side": 1,
      "message": "It is initialized by the call to parseRecord() within the loop, but you\u0027re right in that the scope of this variable could be reduced.",
      "parentUuid": "b43f8486_f9e42d08",
      "range": {
        "startLine": 162,
        "startChar": 4,
        "endLine": 162,
        "endChar": 23
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e363a37c_d03fe922",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 168,
      "author": {
        "id": 1000266
      },
      "writtenOn": "2019-04-18T03:08:15Z",
      "side": 1,
      "message": "In case of error of parsing record, the reason can be:\n+ Data shorter than header length\n+ Invalid header checksum\n+ Invalid record checksum\n+ Etc\nand it means that the FRU multi-record data is not valid.\nI don\u0027t think we need to continue checking the next record.\n\nWe only check the next record when the reason is \"Unsupported record type\" (recordType \u003e MAX_PARSE_TYPE).\n\nPlease consider to handle the error cases.",
      "range": {
        "startLine": 168,
        "startChar": 8,
        "endLine": 168,
        "endChar": 19
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90d5b173_eeeed15d",
        "filename": "multirecord.cpp",
        "patchSetId": 16
      },
      "lineNbr": 168,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2019-04-24T17:43:37Z",
      "side": 1,
      "message": "In all the cases that you listed we return NULL, which aborts the loop on the start of the next iteration. You\u0027re right though that we shouldn\u0027t push_back in this case. Will fix.",
      "parentUuid": "e363a37c_d03fe922",
      "range": {
        "startLine": 168,
        "startChar": 8,
        "endLine": 168,
        "endChar": 19
      },
      "revId": "7b18a423840e7cae9baa78d23d8c4c3887ea8c40",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}