{
  "comments": [
    {
      "key": {
        "uuid": "52ce61e3_319f84c7",
        "filename": "frup.cpp",
        "patchSetId": 3
      },
      "lineNbr": 922,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "This function name has a typo.",
      "range": {
        "startLine": 922,
        "startChar": 8,
        "endLine": 922,
        "endChar": 23
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd7e3a9a_70f4b0d2",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "I don\u0027t really like this. The way it\u0027s accessed later, this order is enforced to align with type identifiers. I\u0027d rather see this as an enum with the int value explicitly set to the type ID - that\u0027s more C++-like and less fragile.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 35,
        "endChar": 2
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2214532_e2e0b7b1",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "I think I don\u0027t quite understand your idea, but I agree that this is fragile.\nI\u0027d offer to do index-based initialization here (and get rid of `MAX_PARSE_TYPE` define in multirecord.hpp):\n\nin multirecord.hpp:\n\n enum IpmiMultirecordType\n {\n     POWER_SUPPLY_INFO           \u003d 0x00,\n     DC_OUTPUT                   \u003d 0x01,\n     DC_LOAD                     \u003d 0x02,\n     MANAGEMENT_ACCESS           \u003d 0x03, // Not supported due to variable length format\n     BASE_COMPATIBILITY          \u003d 0x04,\n     EXTEND_COMPATIBILITY        \u003d 0x05,\n     ASF_FIXED_SMBUS_DEVICE      \u003d 0x06,\n     ASF_LEGACY_DEVICE_ALERTS    \u003d 0x07,\n     ASF_REMOTE_CONTROL          \u003d 0x08,\n     EXTENDED_DC_OUTPUT          \u003d 0x09,\n     EXTENDED_DC_LOAD            \u003d 0x0A,\n     TOTAL_MR_TYPES\n };\n\nhere:\n\n static uint8_t record_sizes[TOTAL_MR_TYPES] \u003d\n {\n     [POWER_SUPPLY_INFO] \u003d sizeof(PowerSupplyInfo),\n     [DC_OUTPUT] \u003d sizeof(DcOutputInfo),\n };\n\nThen later check agains zero record_sizes[type] instead of MAX_PARSE_TYPE.\nWhat do you say?",
      "parentUuid": "dd7e3a9a_70f4b0d2",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 35,
        "endChar": 2
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "021a3b76_91e27b81",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-14T19:11:24Z",
      "side": 1,
      "message": "Yes, that\u0027s essentially what I was suggesting. Great.",
      "parentUuid": "a2214532_e2e0b7b1",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 35,
        "endChar": 2
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ca3b1d0_0afed99d",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "021a3b76_91e27b81",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 35,
        "endChar": 2
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f7c01bd_20a4b133",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2018-07-31T15:57:12Z",
      "side": 1,
      "message": "if this is only called from IPMI_FRU_DEBUG context, please wrap it in that same ifdef",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "897640f1_234deb75",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "2f7c01bd_20a4b133",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23187b3d_73329a57",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "897640f1_234deb75",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c2260b7_db522257",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2018-07-31T15:57:12Z",
      "side": 1,
      "message": "whitespace at the end of the line.",
      "range": {
        "startLine": 122,
        "startChar": 40,
        "endLine": 122,
        "endChar": 41
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24d47a40_fa3fa450",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c2260b7_db522257",
      "range": {
        "startLine": 122,
        "startChar": 40,
        "endLine": 122,
        "endChar": 41
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d548c524_6b4515af",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "If you wrote accessors instead of bitfielding, you wouldn\u0027t have all these boring-to-type-and-read casts sitting around and exceeding the 80c width limit (which they all do).",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab7f43cf_f6e6a7a1",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 123,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d548c524_6b4515af",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e11576d_a9b133b6",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "\"TACHOMETER\"",
      "range": {
        "startLine": 162,
        "startChar": 21,
        "endLine": 162,
        "endChar": 34
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87f59abb_95012ce7",
        "filename": "multirecord.cpp",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e11576d_a9b133b6",
      "range": {
        "startLine": 162,
        "startChar": 21,
        "endLine": 162,
        "endChar": 34
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98cfddb6_43e2f6fa",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Tons and tons of typos here, I\u0027ll call out the ones I find but I\u0027d like to avoid checking them in. Please go over it again yourself if you can, looking for typos.",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e710643_9bfd2446",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "Sure. The author will run it through codespell. Sorry.",
      "parentUuid": "98cfddb6_43e2f6fa",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a0deeba_87fd6196",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Not sure how this line works out with our open license. Please ask Brad.",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 27
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97c44922_1d2d9b83",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 6,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "This is a word-for-word copy of the official Apache 2.0 License template:\nhttps://www.apache.org/licenses/LICENSE-2.0.html",
      "parentUuid": "8a0deeba_87fd6196",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 6,
        "endChar": 27
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3d1efad_a32e2901",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Bitfields are not portable to machines with different endianness. Please have a look at the accessors here: https://github.com/openbmc/phosphor-host-ipmid/blob/master/sensorhandler.h",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 36
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82ea985f_2b68afe3",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "Yes, thank your for this comment. I was aware of this but passed this in my original review as I though this wasn\u0027t actually relevant for OpenBMC which, as it seems, only runs on ARM-based chips using the same ABI and the same compiler.\n\nFrom your later comments I take it as you\u0027re proposing to add accessors into this structure and do \"manual\" bit-mangling in them using shift and logic operators. Am I correct? Another way would be defining oppositely ordered types depending on target endianness.",
      "parentUuid": "c3d1efad_a32e2901",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 36
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b43f8b9_fe08ecad",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-14T19:11:24Z",
      "side": 1,
      "message": "I was suggesting the former. The latter would also be okay with me, although I\u0027d frankly prefer code that only needs to be compiled one way instead of having to maintain two separate definitions of each type.",
      "parentUuid": "82ea985f_2b68afe3",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 36
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4980cb91_1c943df4",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2018-08-20T13:05:34Z",
      "side": 1,
      "message": "\u003e  OpenBMC which, as it seems, only runs on ARM-based chips using the same ABI and the same compiler.\n\nWe run OpenBMC on a 32 bit PPC called FSP2.",
      "parentUuid": "82ea985f_2b68afe3",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 36
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc11fa3a_2dfebd18",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4980cb91_1c943df4",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 54,
        "endChar": 36
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "752a1665_10a20746",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "overallCapacity",
      "range": {
        "startLine": 63,
        "startChar": 13,
        "endLine": 63,
        "endChar": 27
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9014c51b_43cc1330",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "752a1665_10a20746",
      "range": {
        "startLine": 63,
        "startChar": 13,
        "endLine": 63,
        "endChar": 27
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eda3eaa_aebfdc00",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Please remove the bitfield",
      "range": {
        "startLine": 76,
        "startChar": 6,
        "endLine": 81,
        "endChar": 40
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d4fde4_6a3fa7bd",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1eda3eaa_aebfdc00",
      "range": {
        "startLine": 76,
        "startChar": 6,
        "endLine": 81,
        "endChar": 40
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0eb1e8c3_f21445c1",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "\"tachometer\"?",
      "range": {
        "startLine": 94,
        "startChar": 11,
        "endLine": 94,
        "endChar": 25
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bfc5b74_de4266ed",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "Sure. Will fix.",
      "parentUuid": "0eb1e8c3_f21445c1",
      "range": {
        "startLine": 94,
        "startChar": 11,
        "endLine": 94,
        "endChar": 25
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7084b3af_42184047",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8bfc5b74_de4266ed",
      "range": {
        "startLine": 94,
        "startChar": 11,
        "endLine": 94,
        "endChar": 25
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43bdcbe1_6c5d9fd3",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "\"Multirecord\"",
      "range": {
        "startLine": 128,
        "startChar": 5,
        "endLine": 128,
        "endChar": 19
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba45e931_f672a271",
        "filename": "multirecord.hpp",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43bdcbe1_6c5d9fd3",
      "range": {
        "startLine": 128,
        "startChar": 5,
        "endLine": 128,
        "endChar": 19
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3c89fc4_19a7daf4",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "These comments are definitely wrong. Especially the last one. This index corresponds to \u0027pad\u0027 field of common_header, not to IPMI_EIGHT_BYTES (which, as index, is out of bounds anyway).\n\nWill be fixed in next patchset.",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82e13ff1_1ef56323",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3c89fc4_19a7daf4",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8594adba_dce036e4",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "Same here.",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fda8795_5d4ca61f",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8594adba_dce036e4",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ffbd3df_39692923",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Does it make sense to take the specific power supply struct instead, to prevent user error?",
      "range": {
        "startLine": 323,
        "startChar": 29,
        "endLine": 323,
        "endChar": 35
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4e30eb3_0eb734be",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-08-06T12:40:11Z",
      "side": 1,
      "message": "Agreed. Will be fixed.",
      "parentUuid": "7ffbd3df_39692923",
      "range": {
        "startLine": 323,
        "startChar": 29,
        "endLine": 323,
        "endChar": 35
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69c68cf6_cc24067c",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4e30eb3_0eb734be",
      "range": {
        "startLine": 323,
        "startChar": 29,
        "endLine": 323,
        "endChar": 35
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91d15c01_fb6db83f",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "\"OverallCapacity\"",
      "range": {
        "startLine": 325,
        "startChar": 19,
        "endLine": 325,
        "endChar": 33
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de6ac5dc_f0c5b29f",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 325,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "91d15c01_fb6db83f",
      "range": {
        "startLine": 325,
        "startChar": 19,
        "endLine": 325,
        "endChar": 33
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0274e3e_5110c79e",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 350,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Many of these exceed the 80c width limit.",
      "range": {
        "startLine": 350,
        "startChar": 0,
        "endLine": 350,
        "endChar": 85
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71d6f28c_b888ca66",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 350,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0274e3e_5110c79e",
      "range": {
        "startLine": 350,
        "startChar": 0,
        "endLine": 350,
        "endChar": 85
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fc82285_bbd4549e",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "\"Tachometer\"",
      "range": {
        "startLine": 357,
        "startChar": 19,
        "endLine": 357,
        "endChar": 31
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa461ab5_94130588",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 357,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3fc82285_bbd4549e",
      "range": {
        "startLine": 357,
        "startChar": 19,
        "endLine": 357,
        "endChar": 31
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e8d04c7_c06b6b76",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 374,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Again, does it make sense to take the specific DC output type? This will also save you quite a few characters and stop you from exceeding the line character limit here and above.",
      "range": {
        "startLine": 374,
        "startChar": 28,
        "endLine": 374,
        "endChar": 34
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6edbe87b_4fc7ffe6",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 374,
      "author": {
        "id": 1000219
      },
      "writtenOn": "2018-11-09T14:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e8d04c7_c06b6b76",
      "range": {
        "startLine": 374,
        "startChar": 28,
        "endLine": 374,
        "endChar": 34
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30504e67_78f359b3",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 406,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Do you need to use decltype here? I thought auto would do enough.",
      "range": {
        "startLine": 406,
        "startChar": 16,
        "endLine": 406,
        "endChar": 24
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72c3ec74_ee3437a6",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 407,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "Is it too late for us to avoid doing string typing? At very least, I\u0027d like to see a constant shared between where pdata.section is set vs where it is checked here. Same for \"Data\" on this line also",
      "range": {
        "startLine": 407,
        "startChar": 39,
        "endLine": 407,
        "endChar": 50
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b365c60_397eaf65",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 407,
      "author": {
        "id": 1000192
      },
      "writtenOn": "2018-09-05T11:23:01Z",
      "side": 1,
      "message": "I believe it indeed is too late to avoid doing string typing. This is an inborn property of a yaml-based design embraced by openbmc project in general an by ipmi-fru-parser in particular. There is no place where `pdata.section` or `pdata.first` are set to those values explicitly. Those values are read from `config.yaml`.\n\nHowever, I think that taking in account that it is repeated twice in this file, it would indeed be great to replace this condition with an inline function and, possibly, the string literals with constants. Will do it in next patchset.",
      "parentUuid": "72c3ec74_ee3437a6",
      "range": {
        "startLine": 407,
        "startChar": 39,
        "endLine": 407,
        "endChar": 50
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5de161bf_32560ea9",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 525,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "replace with shared constant at minimum",
      "range": {
        "startLine": 525,
        "startChar": 39,
        "endLine": 525,
        "endChar": 50
      },
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a808e9c_46c5f0ca",
        "filename": "writefrudata.cpp",
        "patchSetId": 3
      },
      "lineNbr": 574,
      "author": {
        "id": 1000099
      },
      "writtenOn": "2018-08-01T02:17:12Z",
      "side": 1,
      "message": "would it make sense to populate a list with only the multirecord areas instead, and then you can skip some of the nested for loops in ipmiUpdateMultirecord? This would cut down on your runtime complexity too as you wouldn\u0027t need to walk the entire tree again.",
      "revId": "a112e42f1b6c310eff4fd8d7dc92f01e88a43813",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}